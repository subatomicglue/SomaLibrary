AWSTemplateFormatVersion: '2010-09-09'
Description: Create an S3 Bucket with Cloudfront for hosting static HTML files.

Parameters:
  S3BucketName:
    Description: "S3 bucket name"
    Type: String
  DomainName:
    Description: "domain name"
    Type: String
  DomainName2:
    Description: "domain name"
    Type: String
  EditableHostname:
    Description: "The Editable Hostname (could be www)"
    Type: String
  StaticHostnameForTesting:
    Description: "Static Hostname For Testing (e.g. private)"
    Type: String

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: Private

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: "origin access control(OAC) for allowing cloudfront to access S3 bucket"
        Name: static-hosting-OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # Set up a Redirect from DomainName2 to DomainName, so that SEO isn't split (which would result in SEO penalties)
  RedirectAllAliasesFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: RedirectAllAliasesToCanonical
      FunctionConfig:
        Comment: !Sub "Redirect all subdomains of ${DomainName} to canonical ${DomainName2}"
        Runtime: cloudfront-js-1.0
      AutoPublish: true
      FunctionCode:
        !Sub |
          function handler(event) {
            var request = event.request;
            var host = request.headers['host'].value.toLowerCase();

            var canonicalRoot = "${DomainName2}".toLowerCase();   // e.g., example.com
            var alternates = ["${DomainName}".toLowerCase()];   // e.g., exam-ple.com

            // Already on canonical domain? Nothing to do
            if (host.endsWith(canonicalRoot)) return request;

            // Check if host matches any alternate domain
            var matchedAlternate = alternates.find(function(a) {
              return host.endsWith(a);
            });

            if (!matchedAlternate) {
              // Host is not canonical or known alternate, leave it alone
              return request;
            }

            // Extract subdomain (anything before the alternate root)
            var subdomain = host.slice(0, host.length - matchedAlternate.length);
            if (subdomain.endsWith('.')) subdomain = subdomain.slice(0, -1);

            var newHost = subdomain ? (subdomain + '.' + canonicalRoot) : canonicalRoot;

            // Build query string safely
            var queryString = "";
            if (Object.keys(request.querystring).length > 0) {
              for (var param in request.querystring) {
                  if (request.querystring[param].value !== undefined) {
                      queryString += encodeURIComponent(param) + '=' + encodeURIComponent(request.querystring[param].value) + '&';
                  } else {
                      queryString += encodeURIComponent(param) + '&'; // For parameters without a value
                  }
              }
              // Remove trailing ampersand
              queryString = queryString.slice(0, -1);
              queryString = '?' + queryString;
            }

            return {
              statusCode: 302,
              statusDescription: 'Moved Temporarily',
              //statusCode: 301,
              //statusDescription: 'Moved Permanently',
              headers: {
                'location': { value: 'https://' + newHost + request.uri + queryString }
              }
            };
          }

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - RedirectAllAliasesFunction
      - S3Bucket
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${S3BucketName}.s3.${AWS::Region}.amazonaws.com"
            Id: static-hosting
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: "true"
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        HttpVersion: http2
        Aliases:
          - !Sub "${DomainName}"
          - !Sub "${DomainName2}"
          - !Sub "${EditableHostname}.${DomainName}"
          - !Sub "${EditableHostname}.${DomainName2}"
          - !Sub "www.${DomainName}"
          - !Sub "www.${DomainName2}"
          - !Sub "${StaticHostnameForTesting}.${DomainName}"
          - !Sub "${StaticHostnameForTesting}.${DomainName2}"
        ViewerCertificate:
          AcmCertificateArn: "arn:aws:acm:us-east-1:244726690758:certificate/8ada54ac-0797-4894-9e7a-5e4d356e005f"
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          Compress: true
          TargetOriginId: static-hosting
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: !Ref MyCachePolicy
          ResponseHeadersPolicyId: !Ref MyResponseHeadersPolicy
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RedirectAllAliasesFunction.FunctionARN



  MyCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: CachePolicy
        Comment: Configures caching behavior
        DefaultTTL: 86400                # Default time-to-live (24 hours)
        MaxTTL: 31536000                # Maximum time-to-live (1 year)
        MinTTL: 0                       # Minimum time-to-live (no forced caching)
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: none         # No custom headers forwarded
          CookiesConfig:
            CookieBehavior: none         # No cookies forwarded
          QueryStringsConfig:
            QueryStringBehavior: none    # No query strings forwarded

  MyResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: ReferrerPolicyHeaderPolicy
        Comment: Adds security headers including Referrer-Policy
        CorsConfig:
          AccessControlAllowOrigins:
            Items:
              - !Sub "${DomainName}"
              - !Sub "${DomainName2}"
              - !Sub "${EditableHostname}.${DomainName}"
              - !Sub "${EditableHostname}.${DomainName2}"
              - !Sub "www.${DomainName}"
              - !Sub "www.${DomainName2}"
              - !Sub "${StaticHostnameForTesting}.${DomainName}"
              - !Sub "${StaticHostnameForTesting}.${DomainName2}"
          AccessControlAllowHeaders:
            Items:
              - "*"
          AccessControlAllowMethods:
            Items:
              - GET
              - POST
              - OPTIONS
              - PUT
          AccessControlAllowCredentials: false   # or true, if you need cookies/Authorization headers
          OriginOverride: true
        SecurityHeadersConfig:
          ReferrerPolicy:
            Override: true
            ReferrerPolicy: strict-origin-when-cross-origin

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub "${S3BucketName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::244726690758:distribution/${CloudFrontDistribution}"

Outputs:
  S3BucketName:
    Description: "The S3 bucket name"
    Value:
      Ref: S3Bucket
  OriginAccessControl:
    Value:
      Ref: CloudFrontOriginAccessControl
  CloudFrontDist:
    Value:
      Ref: CloudFrontDistribution
